import asyncio
import logging
import re
from typing import Dict, Optional
from datetime import datetime
from telegram import Bot, Update, ChatMember
from telegram.ext import Application, MessageHandler, filters, ContextTypes, ChatMemberHandler
from telegram.error import TelegramError, BadRequest, Forbidden

from core.extensions import db
from models.feed import Feed
from models.post import Post

def extract_contacts_from_text(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    phone_pattern = r'(?:\+7|8)[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}'
    phones = re.findall(phone_pattern, text)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–æ–≤
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    emails = re.findall(email_pattern, text)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Telegram —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
    telegram_pattern = r'@[A-Za-z0-9_]{5,}'
    telegrams = re.findall(telegram_pattern, text)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    urls = re.findall(url_pattern, text)
    
    return {
        'phone_numbers': phones,
        'emails': emails,
        'telegram_users': telegrams,
        'urls': urls
    }


class TelegramBot:
    """–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, app=None):
        self.app = app
        self.bot_token = None
        self.bot = None
        self.application = None
        self.logger = logging.getLogger(__name__)
        
        if app:
            self.init_app(app)
    
    def init_app(self, app):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
        self.app = app
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.bot_token = app.config.get('TELEGRAM_BOT_TOKEN')
        
        if not self.bot_token:
            self.logger.warning("TELEGRAM_BOT_TOKEN not found. Bot functionality disabled.")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = Bot(token=self.bot_token)
        
        self.logger.info("Telegram bot service initialized")
        
    async def initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not self.bot_token:
            self.logger.error("Bot token not configured")
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º application —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            from telegram.request import HTTPXRequest
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            request = HTTPXRequest(
                connection_pool_size=1,
                connect_timeout=30.0,
                read_timeout=30.0,
                write_timeout=30.0,
                pool_timeout=30.0
            )
            
            self.application = Application.builder().token(self.bot_token).request(request).build()
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            from telegram.ext import TypeHandler
            debug_handler = TypeHandler(Update, self.debug_all_updates)
            self.application.add_handler(debug_handler, group=-1)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö
            channel_handler = MessageHandler(
                filters.ChatType.CHANNEL, 
                self.handle_channel_message
            )
            self.application.add_handler(channel_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫–æ–≥–¥–∞ –±–æ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è/—É–¥–∞–ª—è–µ—Ç—Å—è)
            member_handler = ChatMemberHandler(
                self.handle_bot_status_change,
                ChatMemberHandler.MY_CHAT_MEMBER
            )
            self.application.add_handler(member_handler)
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    await self.application.initialize()
                    await self.application.start()
                    
                    if self.application.updater:
                        await self.application.updater.start_polling(poll_interval=2.0, timeout=30)
                    
                    self.logger.info("‚úÖ Telegram bot initialized and started polling")
                    break
                    
                except Exception as e:
                    self.logger.warning(f"Attempt {attempt + 1}/{max_retries} failed: {str(e)}")
                    if attempt == max_retries - 1:
                        raise
                    await asyncio.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            await self.check_existing_channels()
            
            return True
            
        except Exception as e:
            self.logger.error(f"Error initializing bot: {str(e)}")
            return False
    
    async def debug_all_updates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            if update.channel_post:
                self.logger.info(f"DEBUG: Received channel_post from {update.channel_post.chat.id} ({update.channel_post.chat.title})")
            elif update.edited_channel_post:
                self.logger.info(f"DEBUG: Received edited_channel_post from {update.edited_channel_post.chat.id}")
            elif update.my_chat_member:
                self.logger.info(f"DEBUG: Received my_chat_member update")
            else:
                self.logger.debug(f"DEBUG: Received other update type: {type(update)}")
        except Exception as e:
            self.logger.error(f"Error in debug handler: {e}")
        
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.application and self.application.updater:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            self.logger.info("‚è∏Ô∏è  Telegram bot stopped")
        except Exception as e:
            self.logger.error(f"Error stopping bot: {str(e)}")

    async def handle_bot_status_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            self.logger.info(f"Bot status change event received: {update}")
            my_chat_member = update.my_chat_member
            if not my_chat_member:
                self.logger.debug("No my_chat_member data in update")
                return
                
            chat = my_chat_member.chat
            old_status = my_chat_member.old_chat_member.status if my_chat_member.old_chat_member else None
            new_status = my_chat_member.new_chat_member.status if my_chat_member.new_chat_member else None
            
            self.logger.info(f"Status change in {chat.type} {chat.id} ({chat.title}): {old_status} -> {new_status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
            if chat.type != "channel":
                self.logger.debug(f"Ignoring status change in non-channel: {chat.type}")
                return
                
            channel_id = str(chat.id)
            
            # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –∫–∞–Ω–∞–ª
            if (old_status in [ChatMember.LEFT, ChatMember.BANNED, None] and 
                new_status == ChatMember.ADMINISTRATOR):
                
                self.logger.info(f"üéâ Bot added as admin to channel: {channel_id} ({chat.title})")
                await self.on_bot_added_to_channel(channel_id, chat)
                
            # –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞
            elif (old_status == ChatMember.ADMINISTRATOR and 
                  new_status in [ChatMember.LEFT, ChatMember.BANNED]):
                
                self.logger.info(f"‚ùå Bot removed from channel: {channel_id} ({chat.title})")
                await self.on_bot_removed_from_channel(channel_id)
                
        except Exception as e:
            self.logger.error(f"Error handling bot status change: {str(e)}")

    async def on_bot_added_to_channel(self, channel_id: str, chat):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        if not self.app:
            return
            
        with self.app.app_context():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∏–¥
                existing_feed = Feed.query.filter_by(telegram_channel_id=channel_id).first()
                
                if not existing_feed:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–¥
                    feed = Feed(
                        name=chat.title or chat.username or f"Channel {channel_id}",
                        url=f"https://t.me/{chat.username}" if chat.username else f"https://t.me/c/{abs(int(channel_id))}",
                        telegram_channel_id=channel_id,
                        description=getattr(chat, 'description', '') or f"Auto-detected Telegram channel: {chat.title}",
                        is_active=True
                    )
                    db.session.add(feed)
                    db.session.commit()
                    self.logger.info(f"‚úÖ Created new feed for channel: {chat.title} (ID: {feed.id})")
                else:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–¥
                    existing_feed.is_active = True
                    existing_feed.name = chat.title or existing_feed.name
                    existing_feed.updated_at = datetime.utcnow()
                    db.session.commit()
                    self.logger.info(f"üîÑ Reactivated existing feed: {existing_feed.name} (ID: {existing_feed.id})")
                
            except Exception as e:
                db.session.rollback()
                self.logger.error(f"Error processing bot addition to channel {channel_id}: {str(e)}")

    async def on_bot_removed_from_channel(self, channel_id: str):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        if not self.app:
            return
            
        with self.app.app_context():
            try:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∏–¥
                feed = Feed.query.filter_by(telegram_channel_id=channel_id).first()
                if feed:
                    feed.is_active = False
                    feed.updated_at = datetime.utcnow()
                    db.session.commit()
                    self.logger.info(f"üîá Deactivated feed: {feed.name} (ID: {feed.id})")
            except Exception as e:
                db.session.rollback()
                self.logger.error(f"Error processing bot removal from channel {channel_id}: {str(e)}")

    async def handle_channel_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            message = update.channel_post or update.edited_channel_post
            if not message:
                self.logger.debug("No channel message found in update")
                return
                
            chat = message.chat
            channel_id = str(chat.id)
            self.logger.info(f"üì® Received message from channel {channel_id} ({chat.title}): {message.text or 'media message'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –≤ –Ω–∞—à–µ–π –ë–î
            if not self.app:
                return
                
            with self.app.app_context():
                feed = Feed.query.filter_by(telegram_channel_id=channel_id, is_active=True).first()
                if not feed:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    feed = Feed(
                        name=chat.title or chat.username or f"Channel {channel_id}",
                        url=f"https://t.me/{chat.username}" if chat.username else f"https://t.me/c/{abs(int(channel_id))}",
                        telegram_channel_id=channel_id,
                        description=f"Auto-detected channel: {chat.title}",
                        is_active=True
                    )
                    db.session.add(feed)
                    db.session.commit()
                    self.logger.info(f"üìÅ Auto-created feed for new channel: {chat.title} (ID: {feed.id})")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                post_data = await self.parse_telegram_message(message, feed.id)
                if post_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    existing_post = Post.get_by_telegram_message_id(
                        post_data["telegram_message_id"], 
                        feed.id
                    )
                    
                    if existing_post:
                        if update.edited_channel_post:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            existing_post.content = post_data["content"]
                            existing_post.is_edited = True
                            existing_post.updated_at = datetime.utcnow()
                            if post_data["contacts"]:
                                existing_post.set_contacts(post_data["contacts"])
                            db.session.commit()
                            self.logger.info(f"‚úèÔ∏è  Updated post {existing_post.id} in feed {feed.name}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        new_post = Post(
                            telegram_message_id=post_data["telegram_message_id"],
                            content=post_data["content"],
                            feed_id=feed.id,
                            telegram_date=post_data["telegram_date"],
                            media_url=post_data["media_url"],
                            media_type=post_data["media_type"],
                            is_edited=post_data["is_edited"],
                            views=post_data.get("views", 0)
                        )
                        
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                        if post_data["contacts"]:
                            new_post.set_contacts(post_data["contacts"])
                        
                        db.session.add(new_post)
                        db.session.commit()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∏–¥–∞
                        feed.update_last_sync()
                        
                        self.logger.info(f"üíæ Saved new post {new_post.id} from {feed.name}: {post_data['content'][:50]}...")
                        
        except Exception as e:
            if self.app:
                with self.app.app_context():
                    db.session.rollback()
            self.logger.error(f"Error handling channel message: {str(e)}")
    
    async def parse_telegram_message(self, message, feed_id: int) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î"""
        try:
            content = message.text or message.caption or ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ (–µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞)
            has_content = bool(content.strip())
            has_media = bool(message.photo or message.video or message.document or 
                           message.animation or message.voice or message.audio)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            if has_content and not has_media:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                meaningful_content = ''.join(c for c in content if c.isalnum() or c in '.,!?;:-()[]{}@#$%^&*+=<>/\\|`~"\'').strip()
                if not meaningful_content:
                    self.logger.info(f"Skipping message {message.message_id} with only whitespace/special chars")
                    return None
            
            if not has_content and not has_media:
                self.logger.info(f"Skipping empty message {message.message_id} from feed {feed_id}")
                return None
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            media_url = None
            media_type = None
            
            if message.photo:
                # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                photo = message.photo[-1]
                try:
                    file = await self.bot.get_file(photo.file_id)
                    media_url = file.file_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ file_path
                    media_type = "photo"
                except Exception as e:
                    self.logger.error(f"Error getting photo file path: {e}")
                    media_url = None
                    media_type = None
            elif message.video:
                try:
                    file = await self.bot.get_file(message.video.file_id)
                    media_url = file.file_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ file_path
                    media_type = "video"
                except Exception as e:
                    self.logger.error(f"Error getting video file path: {e}")
            elif message.document:
                try:
                    file = await self.bot.get_file(message.document.file_id)
                    media_url = file.file_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ file_path
                    media_type = "document"
                except Exception as e:
                    self.logger.error(f"Error getting document file path: {e}")
            elif message.animation:
                try:
                    file = await self.bot.get_file(message.animation.file_id)
                    media_url = file.file_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ file_path
                except Exception as e:
                    self.logger.error(f"Error getting animation file path: {e}")
                media_type = "animation"
            elif message.voice:
                try:
                    file = await self.bot.get_file(message.voice.file_id)
                    media_url = file.file_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ file_path
                except Exception as e:
                    self.logger.error(f"Error getting voice file path: {e}")
                media_type = "voice"
            elif message.audio:
                try:
                    file = await self.bot.get_file(message.audio.file_id)
                    media_url = file.file_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ file_path
                except Exception as e:
                    self.logger.error(f"Error getting audio file path: {e}")
                media_type = "audio"
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            contacts = extract_contacts_from_text(content) if content else None
            
            return {
                "telegram_message_id": message.message_id,
                "content": content,
                "media_url": media_url,
                "media_type": media_type,
                "feed_id": feed_id,
                "telegram_date": message.date,
                "is_edited": hasattr(message, 'edit_date') and message.edit_date is not None,
                "views": getattr(message, 'views', 0) or 0,
                "contacts": contacts
            }
            
        except Exception as e:
            self.logger.error(f"Error parsing telegram message: {str(e)}")
            return None

    async def check_existing_channels(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        if not self.app:
            return
            
        try:
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
            await asyncio.sleep(2)
            
            with self.app.app_context():
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–¥—ã —Å telegram_channel_id
                active_feeds = Feed.query.filter_by(is_active=True).filter(
                    Feed.telegram_channel_id != None
                ).all()
                
                self.logger.info(f"üîç Checking {len(active_feeds)} existing channels...")
                
                for feed in active_feeds:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ
                        if self.application and self.application.bot:
                            chat_member = await self.application.bot.get_chat_member(
                                feed.telegram_channel_id, 
                                self.application.bot.id
                            )
                            if chat_member.status == ChatMember.ADMINISTRATOR:
                                self.logger.info(f"‚úÖ Monitoring channel: {feed.name} ({feed.telegram_channel_id})")
                            else:
                                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∏–¥, –µ—Å–ª–∏ –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω
                                feed.is_active = False
                                feed.updated_at = datetime.utcnow()
                                db.session.commit()
                                self.logger.info(f"üîá Deactivated {feed.name} - bot is no longer admin")
                        else:
                            self.logger.warning("Bot application not initialized, skipping channel check")
                            
                    except Exception as e:
                        self.logger.warning(f"Could not check status for channel {feed.name}: {str(e)}")
                        # –ù–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∏–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
                        
                    await asyncio.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    
        except Exception as e:
            self.logger.error(f"Error during startup channel check: {str(e)}")

    async def get_channel_info(self, channel_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            if not self.bot:
                self.logger.error("Bot not initialized")
                return None
                
            chat = await self.bot.get_chat(channel_id)
            return {
                "id": str(chat.id),
                "title": chat.title,
                "username": chat.username,
                "description": getattr(chat, 'description', ''),
                "type": chat.type
            }
        except Exception as e:
            self.logger.error(f"Error getting channel info for {channel_id}: {str(e)}")
            return None

    async def sync_channel_history(self, channel_id: str, feed_id: int, limit: int = 20):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è bot token"""
        self.logger.warning("History sync not available for bot tokens - only real-time monitoring")
        return 0
    
    # === –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° CLI ===
    
    async def start_client(self):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CLI - –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        return await self.initialize_bot()
    
    async def stop_client(self):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CLI - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.stop_bot()
    
    async def sync_all_feeds(self, limit_per_feed: int = 50) -> Dict[int, int]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CLI - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±–æ—Ç–æ–≤"""
        self.logger.warning("History sync not available for bot tokens - only real-time monitoring")
        return {}
    
    async def sync_channel_to_database(self, feed_id: int, limit: int = 50) -> int:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CLI - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±–æ—Ç–æ–≤"""
        self.logger.warning("History sync not available for bot tokens - only real-time monitoring")
        return 0
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not await self.initialize_bot():
            return False
            
        try:
            self.logger.info("üöÄ Starting Telegram channel monitoring...")
            self.logger.info("üì° Bot will automatically detect channels where it's admin")
            self.logger.info("üíæ New messages will be saved to database automatically")
            self.logger.info("üì® Monitoring started. Press Ctrl+C to stop.")
            
            # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã - –ø—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                self.logger.info("‚è∏Ô∏è  Monitoring stopped by user")
                await self.stop_bot()
                
        except Exception as e:
            self.logger.error(f"Error during monitoring: {str(e)}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_bot = TelegramBot()


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê ===

async def start_realtime_monitoring():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    if not telegram_bot.bot:
        logging.error("Telegram bot not initialized")
        return
    
    await telegram_bot.start_monitoring()


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    
    from app import create_app
    
    app = create_app()
    telegram_bot.init_app(app)
    
    asyncio.run(start_realtime_monitoring())
